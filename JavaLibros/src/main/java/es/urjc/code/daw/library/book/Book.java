package es.urjc.code.daw.library.book;

import java.util.Objects;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class Book {

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Long id = null;
	
	private String title;
	
	@Column(length = 50000)
	private String description;

	public Book() {}

	public Book(String nombre, String description) {
		super();
		this.title = nombre;
		this.description = description;
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public Long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@Override
	public String toString() {
		return "Book [id=" + id + ", title=" + title + ", description=" + description + "]";
	}

	/**
	 * This equal method will guarantee equality by its primary key identifier. If the entity hasn't been persisted yet,
	 * and id is null, we won't be able to check its equality with other entities, so it will be always `false`. This
	 * implementation will validate the equality of the same entity among different state transitions for entities that
	 * doesn't contain a Natural ID and when the ID is autogenerated.
	 *
	 * @param o - object to be check for equality
	 * @return true if both objects are equal
	 * @see <a href="https://vladmihalcea.com/how-to-implement-equals-and-hashcode-using-the-jpa-entity-identifier/">More
	 * information about this solution.</a>
	 */
	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (!(o instanceof Book)) {
			return false;
		}
		Book that = (Book) o;
		return id != null && Objects.equals(id, that.id);
	}

	/**
	 * As we are using the Entity Identifier ( that is autogenerated ) for the equals method, we require a hashcode
	 * method that returns the same value every time, regardless the entity has been persisted ( will have an id value )
	 * or not ( it won't ).
	 *
	 * @return a constant Hashcode value
	 * @see <a href="https://vladmihalcea.com/how-to-implement-equals-and-hashcode-using-the-jpa-entity-identifier/">More
	 * information about this solution.</a>
	 */
	@Override
	public int hashCode() {
		return getClass().hashCode();
	}
}
